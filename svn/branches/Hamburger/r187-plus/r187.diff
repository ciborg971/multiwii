Common subdirectories: /Volumes/rack/RC-Heli/MultiWii/google-code/multiwii/trunk/MultiWii/.svn and /Volumes/Vault/Users/js/Documents/RC-Heli/TriWiiCopter/my-13-r187/TRI60/MultiWii/.svn
diff -u /Volumes/rack/RC-Heli/MultiWii/google-code/multiwii/trunk/MultiWii/MultiWii.pde /Volumes/Vault/Users/js/Documents/RC-Heli/TriWiiCopter/my-13-r187/TRI60/MultiWii/MultiWii.pde
--- /Volumes/rack/RC-Heli/MultiWii/google-code/multiwii/trunk/MultiWii/MultiWii.pde	2011-06-27 11:08:12.000000000 +0200
+++ /Volumes/Vault/Users/js/Documents/RC-Heli/TriWiiCopter/my-13-r187/TRI60/MultiWii/MultiWii.pde	2011-06-27 13:58:21.000000000 +0200
@@ -9,9 +9,15 @@
 */
 
 #include "config.h"
+
+#include "TRI60.h"
+
 #include "def.h"
 #define   VERSION  18
 
+#if defined(INTERNAL_I2C_PULLUPS) || not defined(FREEIMUv01)
+      #error "for freeimu v0.1 from fax8/Fabio Varesano, you MUST undefine internal i2c pullups. Else you destroy board!"
+#endif
 /*********** RC alias *****************/
 #define ROLL       0
 #define PITCH      1
@@ -146,9 +152,10 @@
 
   static uint32_t telemetryTime = 0;
   static uint32_t telemetryAutoTime = 0;
-  uint16_t pmeter6Raw, powerValue;                //used for current reading
-  static uint16_t pmeter6Avg = PSENSORNULL * 8;   //used for smoothing current reading
-
+  #if (POWERMETER == 2)
+  uint16_t pMeterRaw, powerValue;                //used for current reading
+  static uint32_t psensorTime = 0;
+  #endif
 
   //PITCH & ROLL only dynamic PID adjustemnt,  depending on throttle value
   if      (rcData[THROTTLE]<1500) prop2 = 100;
@@ -168,16 +175,19 @@
   dynD8[YAW] = D8[YAW]*prop1/100;
 
   #if (POWERMETER == 2)
-     pmeter6Raw =  analogRead(PSENSORPIN);
-     pmeter6Avg = (pmeter6Avg * 2 + pmeter6Raw*8 +1)/3; // average of last 3 values; use value*8 for better accuracy
-     powerValue = ( PSENSORNULL > pmeter6Avg/8 ? PSENSORNULL - pmeter6Avg/8 : pmeter6Avg/8 - PSENSORNULL); // do not use abs(), it would induce implicit cast to uint and overrun
+  if (micros() > psensorTime + 19977 /*20000*/) { // 50Hz, but avoid bulking of timed tasks
+     pMeterRaw =  analogRead(PSENSORPIN);
+     //Serial.println(pMeterRaw); // used to find PSENSORNULL
+     powerValue = ( PSENSORNULL > pMeterRaw ? PSENSORNULL - pMeterRaw : pMeterRaw - PSENSORNULL); // do not use abs(), it would induce implicit cast to uint and overrun
      #ifdef LOG_VALUES
        if ( powerValue < 256) {  // only accept reasonable values. 256 is empirical
          if (powerValue > powerMax) powerMax = powerValue;
          powerAvg = powerValue;
        }
      #endif
-     pMeter[PMOTOR_SUM] += (uint32_t) ( powerValue * ( cycleTime/PHARDINTDIV) );
+     pMeter[PMOTOR_SUM] += (uint32_t) powerValue;
+     psensorTime = micros();
+  }
   #endif
 
   #if defined(VBAT)
@@ -521,4 +531,4 @@
   #if defined(LOG_VALUES) || (POWERMETER == 1)
     logMotorsPower();
   #endif 
-}
+}
Only in /Volumes/Vault/Users/js/Documents/RC-Heli/TriWiiCopter/my-13-r187/TRI60/MultiWii: TRI60.h
diff -u /Volumes/rack/RC-Heli/MultiWii/google-code/multiwii/trunk/MultiWii/config.h /Volumes/Vault/Users/js/Documents/RC-Heli/TriWiiCopter/my-13-r187/TRI60/MultiWii/config.h
--- /Volumes/rack/RC-Heli/MultiWii/google-code/multiwii/trunk/MultiWii/config.h	2011-06-27 11:08:12.000000000 +0200
+++ /Volumes/Vault/Users/js/Documents/RC-Heli/TriWiiCopter/my-13-r187/TRI60/MultiWii/config.h	2011-06-27 14:34:25.000000000 +0200
@@ -11,9 +11,9 @@
 /* The type of multicopter */
 //#define GIMBAL
 //#define BI
-//#define TRI
+#define TRI
 //#define QUADP
-#define QUADX
+//#define QUADX
 //#define Y4
 //#define Y6
 //#define HEX6
@@ -198,6 +198,7 @@
 /* 2 - hard: - (uses hardware sensor, after configuration gives reasonable results */
 /*      00. uses analog pin 2 to read voltage output from sensor. */
 /*      01. set POWERMETER hard. Uses PLEVELSCALE = 50 */
+/*      02. install low path filter for 25 Hz to sensor input */
 /*      1. compute PLEVELDIV for your sensor (see below for insturctions) */
 /*      2. set PLEVELDIVSOFT to 10000 ( to use LOG_VALUES for individual motor comparison) */
 /*      3. attach, set PSENSORNULL and  PINT2mA */
@@ -213,11 +214,11 @@
 /* larger PLEVELDIV will get you smaller value for power (mAh equivalent) */
 #define PLEVELDIV 10000 // default for soft - if you lower PLEVELDIV, beware of overrun in uint32 pMeter
 #define PLEVELDIVSOFT PLEVELDIV // for soft always equal to PLEVELDIV; for hard set to 10000
-#define PHARDINTDIV 64 //  doNotChange - must divide the sum of analogRead()*cycleTime over cycles to keep small enough for uint32
-//#define PLEVELDIV 271837L // to convert the sum into mAh divide by this value
+//#define PLEVELDIV 1361L // to convert the sum into mAh divide by this value
 /* amploc 25A sensor has 37mV/A */
 /* arduino analog resolution is 4.9mV per unit; units from [0..1023] */
-/* PLEVELDIV = 37 / 4.9  * 10e6 / PHARDINTDIV  * 3600 / 1000  = 424745L */
+/* sampling rate 20ms, approx 19977 micro seconds */
+/* PLEVELDIV = 37 / 4.9  * 10e6 / 19977  * 3600 / 1000  = 1361L */
 /* set to analogRead() value for zero current */
 #define PSENSORNULL 510 // for I=0A my sensor gives 1/2 Vss; that is approx 2.49Volt
 #define PINT2mA 13 // for telemtry display: one integer step on arduino analog translates to mA (example 4.9 / 37 * 100
@@ -229,12 +230,12 @@
 /* The active page on the LCD does get updated automatically */
 /* Easy to use with Terminal application or Textstar LCD - the 4 buttons are preconfigured to send 'A', 'B', 'C', 'D' */
 /* The value represents the refresh interval in cpu time (micro seconds) */
-//#define LCD_TELEMETRY 100000
+//#define LCD_TELEMETRY 100011
 /* to enable automatic hopping between 4 telemetry pages uncomment this. */
 /* This may be useful if your LCD has no buttons or the sending is broken */
 /* hopping is activated and deactivated in unarmed mode with throttle=low & roll=left & pitch=forward */
 /* The value represents the hopping interval in cpu time (micro seconds) */
-//#define LCD_TELEMETRY_AUTO 2000000
+//#define LCD_TELEMETRY_AUTO 2000123
 /* on telemetry page B it gives a bar graph which shows how much voltage battery has left. Range from 0 to 12 Volt is not very informative */
 /* so we try do define a meaningful part. For a 3S battery we define full=12,6V and calculate how much it is above first warning level */
 /* Example: 12.6V - VBATLEVEL1_3S  (for me = 126 - 102 = 24) */
@@ -252,4 +253,4 @@
 
 /**************************************/
 /****END OF CONFIGURABLE PARAMETERS****/
-/**************************************/
+/**************************************/
